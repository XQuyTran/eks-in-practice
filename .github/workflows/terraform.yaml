name: Terraform deployment workflow

on:
  push:
  workflow_dispatch:
    inputs:
      operation:
        description: 'Select operation'
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: 1.12.2

permissions:
  contents: read
  id-token: write
  actions: read

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.operation == 'plan') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          mask-aws-account-id: true

      - name: Terraform Init
        run: terraform init -backend-config="bucket=${{ vars.TF_BACKEND_BUCKET }}" -backend-config="key=${{ vars.TF_BACKEND_KEY }}" -backend-config="region=${{ vars.AWS_REGION }}"
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ./terraform
      
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: ./terraform/tfplan

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.operation == 'apply' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get latest Terraform Plan
        id: get_plan
        run: |
          echo "Fetching latest Terraform plan artifact..."
          run_id=$(gh run list --limit 1 --status success --workflow "${{ github.workflow }}" --json databaseId --jq '.[0].databaseId')
          echo "run_id=${run_id}" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: ./terraform
          run-id: ${{ steps.get_plan.outputs.run_id }}
          github-token: ${{ github.token }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-southeast-7
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          mask-aws-account-id: true

      - name: Terraform Init
        run: terraform init -backend-config="bucket=${{ vars.TF_BACKEND_BUCKET }}" -backend-config="key=${{ vars.TF_BACKEND_KEY }}" -backend-config="region=${{ vars.AWS_REGION }}"
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.operation == 'destroy' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-southeast-7
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          mask-aws-account-id: true

      - name: Terraform Init
        run: terraform init -backend-config="bucket=${{ vars.TF_BACKEND_BUCKET }}" -backend-config="key=${{ vars.TF_BACKEND_KEY }}" -backend-config="region=${{ vars.AWS_REGION }}"
        working-directory: ./terraform

      - name: Terraform Destroy
        run: terraform apply -destroy -auto-approve
        working-directory: ./terraform